openapi: '3.0.0'
info:
  description: 'This is documentation for the Observation System using Google Cloud Platform.'
  version: '1.0.0'
  title: 'Observations'
  contact:
    email: 'bannerbschafer@fastmail.com'
servers:
  - url: https://linked-data-land.appspot.com/v1/
    description: Demo server.
tags:
  - name: 'observations'
    description: 'All APIs for CRUD operations on Observations'
paths:
  /observations:
    post:
      tags:
        - 'observations'
      summary: 'Add a new observation to the system'
      description: ''
      operationId: 'addObservation'
      requestBody:
        required: true
        description: 'The observation that needs to be added to the store'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewObservation'
      responses:
        422:
          description: 'Unprocessable Entity'
        200:
          description: 'the resulting observation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Observation'
    get:
      tags:
        - 'observations'
      summary: 'Retrieves a list of observations'
      description: ''
      operationId: 'listObservations'

      requestBody:
        description: 'The observation that needs to be added to the store'
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Search'
      responses:
        200:
          description: 'successful operation'
          content:
            application/json:
              schema:
                type: 'array'
                items:
                  $ref: '#/components/schemas/Observation'
        422:
          description: 'Unprocessable Entity'
  /observations/{observationId}:
    get:
      tags:
        - 'observations'
      summary: 'Find a single observation by ID'
      description: 'Returns a single observation'
      operationId: 'getObservation'
      parameters:
        - name: 'observationId'
          in: 'path'
          description: 'ID of observation to return'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Observation'
        500:
          description: 'Server Error'
        404:
          description: 'Observation not found'
components:
  schemas:
    NewObservation:
      type: 'object'
      properties:
        phenomenonTime:
          type: 'string'
          format: 'date-time'
        resultTime:
          type: 'string'
          format: 'date-time'
        validInterval:
          type: 'object'
          properties:
            startTime:
              type: 'string'
              format: 'date-time'
            duration:
              type: integer
              description: 'Number of milliseconds since epoc'
        phenomenonLocation:
          type: 'object'
          description: 'GeoJSON geometry'
        observationLocation:
          type: 'object'
          description: 'GeoJSON geometry'
        feature:
          $ref: '#/components/schemas/Referenceable'
        featureType:
          $ref: '#/components/schemas/Referenceable'
        property:
          $ref: '#/components/schemas/Referenceable'
        propertyType:
          $ref: '#/components/schemas/Referenceable'
        process:
          $ref: '#/components/schemas/Referenceable'
        tags:
          type: 'object'
          description: map of tags
        context:
          type: 'array'
          items:
            type: 'string'
        scale:
          type: 'string'
        result:
          anyOf:
            - type: 'string'
            - type: 'array'
            - type: 'boolean'
            - type: 'object'
            - type: 'number'
    Observation:
      type: 'object'
      properties:
        id:
          type: 'string'
          format: 'uuid'
        phenomenonTime:
          type: 'string'
          format: 'date-time'
        resultTime:
          type: 'string'
          format: 'date-time'
        validInterval:
          type: 'object'
          properties:
            startTime:
              type: 'string'
              format: 'date-time'
            duration:
              type: integer
              description: 'Number of milliseconds since epoc'
        phenomenonLocation:
          type: 'object'
          description: 'GeoJSON geometry'
        observationLocation:
          type: 'object'
          description: 'GeoJSON geometry'
        feature:
          $ref: '#/components/schemas/Referenceable'
        featureType:
          $ref: '#/components/schemas/Referenceable'
        property:
          $ref: '#/components/schemas/Referenceable'
        propertyType:
          $ref: '#/components/schemas/Referenceable'
        process:
          $ref: '#/components/schemas/Referenceable'
        tags:
          type: 'object'
          description: map of tags
        context:
          type: 'array'
          items:
            type: 'string'
        scale:
          type: 'string'
        result:
          anyOf:
            - type: 'string'
            - type: 'array'
            - type: 'boolean'
            - type: 'object'
            - type: 'number'
    Referenceable:
      type: 'object'
      properties:
        id:
          oneOf:
            - type: string
              format: uuid
            - type: string
              format: uri
          description: id may be of type uuid or uri (uri includes urn, url, doi, isbn)
        label:
          type: string
        description:
          type: string
        reference:
          type: string
          format: url
    Search:
      type: 'object'
      properties:
        limit:
          type: number
        filters:
          type: array
          items:
            type: '#/Components/schemas/Filter'
    Filter:
      type: 'object'
      properties:
        path:
          type: 'string'
          enum:
            [
              'id',
              'featureId',
              'featureTypeId',
              'propertyId',
              'propertyTypeId',
              'processId',
            ]
          example: 'featureTypeId'
        op:
          type: 'string'
          enum: ['=', 'in']
        match:
          type: 'string'
          example: 'https://schema.org/Person'
